
tuple BasicDriverPlan =
  global DuhFile:             Path
  global OMFile:              Unit => Path
  global VendorName:          String
  global DeviceName:          String
  global LocalMetalDirectory: String
  global DUTName:             String
  global OverwriteExisting:   Boolean
  global OnlyBaseHeader:      Boolean

# create a BasicDriverPlan
# duhFile => path to your duh file (device.json5)
# OMFile => a function to produce the OMFile, takes Unit as an arg
# VendorName => the vendor name used for the device
# DeviceName => the name of the device
# LocalMetalDirectory => the metal/drivers directory in the device's repository
global def makeBasicDriverPlan duhFile omFile vendorName deviceName localMetalDirectory dutName=
  BasicDriverPlan duhFile omFile vendorName deviceName localMetalDirectory dutName True False

# This function provides an external interface through the
# publish/subscribe varible 'basicDriverPlans'
# If you want automatic basic driver creation, create
# a BasicDriverPlan using makeBasicDriverPlan
# Then build the drivers by calling
# crateBasicDriver
def getDevicePlan dutName =
  def plans = subscribe basicDriverPlans
  def samePlan aPlan =
    aPlan.getBasicDriverPlanDUTName ==~ dutName
  find samePlan plans
  | omap getPairFirst

def basicPlanToPlan basicDriverPlan =
  def omfile = basicDriverPlan.getBasicDriverPlanOMFile Unit
  def extraFlags =
    def overwrite =
      if !basicDriverPlan.getBasicDriverPlanOverwriteExisting
      then "-x", Nil
      else Nil
    def onlyBaseHeader =
      if basicDriverPlan.getBasicDriverPlanOnlyBaseHeader
      then "-b", Nil
      else Nil
    overwrite ++ onlyBaseHeader
  def cmd =
    "{here}/../scripts/generate_drivers.py".simplify,
    "-o",
    omfile.getPathName,
    "-d",
    basicDriverPlan.getBasicDriverPlanDuhFile.getPathName,
    "-v",
    basicDriverPlan.getBasicDriverPlanVendorName,
    "-D",
    basicDriverPlan.getBasicDriverPlanDeviceName,
    "-m",
    basicDriverPlan.getBasicDriverPlanLocalMetalDirectory,
    Nil
    ++ extraFlags
  def visibleFiles =
    "{here}/../scripts/generate_drivers.py".simplify.source,
    basicDriverPlan.getBasicDriverPlanDuhFile,
    omfile,
    basicDriverPlan.getBasicDriverPlanLocalMetalDirectory.source,
    Nil
  makePlan cmd visibleFiles

global tuple DriverOutput =
  global CFiles:      List Path
  global IncludeDirs: List String

def makeDriverOutput basicDriverPlan jobOutputs =
  def ifPathCfile path =
    path.getPathName
    | matches `.*\.[c,h]`
  def cFiles = filter ifPathCfile jobOutputs
  def metalDir = basicDriverPlan.getBasicDriverPlanLocalMetalDirectory
  def deviceName = basicDriverPlan.getBasicDriverPlanDeviceName
  def includeDirs =
    "{metalDir}",
    Nil
  DriverOutput
  cFiles
  includeDirs

def makeBasicDrivers basicDriverPlan =
  basicPlanToPlan basicDriverPlan
  | addPythonEnv ("{here}/../scripts/generate_drivers_env".simplify)
  | runJob
  | getJobOutputs
  | makeDriverOutput basicDriverPlan

# External wake target to create basic drivers
# deviceName => the name of the DUT plan
global def createBasicDriver dutPlanName =
  getDevicePlan dutPlanName
  | omap makeBasicDrivers

# wake target to create basic drivers from internal code where
# omfile is generated
# deviceName => the name of the DUT Plan
global def createBasicDriverWithOMFile dutPlanName omfile =
  def omfileArg _ = omfile
  getDevicePlan dutPlanName
  | omap (setBasicDriverPlanOMFile omfileArg)
  | omap makeBasicDrivers
