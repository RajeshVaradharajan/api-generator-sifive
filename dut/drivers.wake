
# Borrowed from future wake
def root /../ filterFn = jfind filterFn root
def jfind filterFn root =
  def helper node acc = match node
    JArray l =
      def tail = foldr helper acc l
      if filterFn node then node, tail else tail
    JObject l =
      def tail = foldr (helper _.getPairSecond _) acc l
      if filterFn node then node, tail else tail
    _ =
      if filterFn node then node, acc else acc
  helper root Nil | JArray

tuple DriverImplementation =
  global IsCompatible: List String
  global Vendor:       String
  global Device:       String
  global CFiles:       List Path
  global IncludeDirs:  List String
  global Sources:      List Path

global def makeDriverImplementation compatibleDevices driverSources includeDirs =
  DriverImplementation compatibleDevices driverSources includeDirs

target driverImpCompatibilityTrees Unit =
  subscribe driverImplementations
  | map (\p p → listToTree scmp p.getDriverImplementationIsCompatible)

target getCompatibleDriverImplementation compatibleString =
  def drivers = filter (compatibleString ∈ _.getPairSecond) Unit.driverImpCompatibilityTrees
  match drivers
    one, Nil = Some one.getPairFirst
    Nil = None
    _ =
      def _ = printlnLevel logWarn "WARNING: More than one driver implementation available for device {compatibleString}. A random one will be chosen."
      None

global target getCompatibleLists dtsJSON =
  def isDevice = match _
    JObject fields = exists (matches `compatible` _.getPairFirst) fields
    _ = False
  def getLists =
    _
    | getJArray
    | getOrElse Nil
    | mapPartial (getJArray)
  match dtsJSON.parseJSONFile
    Pass dtsJValue =
      dtsJValue
      | (_ /../ isDevice)
      | getJArray
      | getOrElse Nil
      | map (_ // `compatible`)
      | mapPartial getJArray
      | map getJString.mapPartial
    Fail e =
      def _ = printlnLevel logWarn "WARNING: Could not parse DTS JSON: {e.getErrorCause}"
      Nil

global def getDriverImplementationsForDUT dut =
  def dts = dut.getDUTDTS
  def omFile = dut.getDUTObjectModelFile
  def compatibleLists = getCompatibleLists dut.getDUTDTSJSON
  def getImpForCompatibleList compatibleList =
    compatibleList
    | mapPartial getCompatibleDriverImplementation
    | head
  mapPartial getImpForCompatibleList compatibleLists

global def getBasicHeadersForDUT dut outputDir =
  def omFile = dut.getDUTObjectModelFile
  def imps = dut.getDriverImplementationsForDUT
  def generateBaseHeaderForDriver driver =
    def device = driver.getDriverImplementationDevice
    def vendor = driver.getDriverImplementationVendor
    makeBaseHeaderPlan vendor device omFile "{outputDir}/{device}"
    | makeBaseHeader
  map generateBaseHeaderForDriver imps
