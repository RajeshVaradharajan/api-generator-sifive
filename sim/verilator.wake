tuple VerilatorCompilePlan =
  global IncludeDirs:   List String
  global LibraryDirs:   List String # Verilog library directories as used in -y option
  global Defines:       List NamedArg
  global SourceFiles:   List Path
  global Plusargs:      List NamedArg
  global ExtraArgs:     List NamedArg
  global MakeArgs:      List NamedArg
  global Main:          Path
  global Prefix:        String
  global TopModule:     String
  global Visible:       List Path
  global Resources:     List String
  global OutputDir:     String

global def defaultVerilatorResources = "verilator/4.028", Nil

global def makeVerilatorCompilePlan sourceFiles main topModule outputDir =
  VerilatorCompilePlan
  Nil            # IncludeDirs
  Nil            # LibraryDirs
  Nil            # Defines
  sourceFiles    # SourceFiles
  Nil            # Plusargs
  Nil            # ExtraArgs
  Nil            # MakeArgs
  main           # Main
  "V{topModule}" # Prefix
  topModule      # TopModule
  Nil            # Visible
  defaultVerilatorResources # Resources
  outputDir      # OutputDir

def verilatorWrapperScript = simplify "{here}/../scripts/verilator_wrapper"

def compileCmdlineArgs options =
  def outputDir    = options.getVerilatorCompilePlanOutputDir
  def plusargs     = options.getVerilatorCompilePlanPlusargs
  def includeDirs  = options.getVerilatorCompilePlanIncludeDirs
  def libraryDirs  = options.getVerilatorCompilePlanLibraryDirs
  def defines      = options.getVerilatorCompilePlanDefines
  def rawFiles     = options.getVerilatorCompilePlanSourceFiles
  def otherArgs    = namedArgsToListString runDir options.getVerilatorCompilePlanExtraArgs
  def topModule    = options.getVerilatorCompilePlanTopModule
  def prefix       = options.getVerilatorCompilePlanPrefix
  def pairs =
    "--prefix",              prefix,
    "--top-module",          topModule,
    "-Mdir",                 outputDir,
    Nil

  def files = distinctBy (scmpIdentifier _.getPathName _.getPathName) rawFiles

  def runDir = outputDir
  def includeArgs = map (\i "+incdir+{i}") includeDirs
  def libraryDirArgs = mapFlat (\i '-y', (relative runDir i), Nil) libraryDirs
  def defineArgs  = namedArgsToCmdline runDir "+define+" "=" defines
  def relativeFiles = map (_.getPathName) files
  def base = verilatorWrapperScript, Nil
  def main = relative outputDir options.getVerilatorCompilePlanMain.getPathName, Nil
  def plusargArgs = namedArgsToCmdline runDir "+" "=" plusargs

  base
  ++ includeArgs
  ++ libraryDirArgs
  ++ defineArgs
  ++ relativeFiles
  ++ plusargArgs
  ++ otherArgs
  ++ pairs
  ++ main

def compileInputs options =
  def outputDir = options.getVerilatorCompilePlanOutputDir
  def includeDirs = options.getVerilatorCompilePlanIncludeDirs
  def libraryDirs = options.getVerilatorCompilePlanLibraryDirs
  def srcFiles = options.getVerilatorCompilePlanSourceFiles
  def visible = options.getVerilatorCompilePlanVisible
  def includeSources = map (sources _ `.*`) includeDirs | flatten
  def librarySources = map (sources _ `.*`) libraryDirs | flatten

  source verilatorWrapperScript, mkdir outputDir, includeSources ++ librarySources ++ srcFiles ++ visible

def filterVerilatorOutputs all =
  filter (\f !matches `.*\.(d|dat|tree|dot|a)` f) all

# runs verilator but does not run make afterwards on the verilated outputs
global def runVerilator options =
  def cmdline = options.compileCmdlineArgs
  def inputs = options.compileInputs
  def verilatorJob =
    makePlan cmdline inputs
    | editPlanFnOutputs (_ _ | filterVerilatorOutputs)
    | setPlanResources options.getVerilatorCompilePlanResources
    | runJob
  def verilatorOutputs = verilatorJob.getJobOutputs

  def outputDir = options.getVerilatorCompilePlanOutputDir
  def makefile = match (findFailFn getPathResult verilatorOutputs)
    Pass _ =
      def verilatorPrefix = options.getVerilatorCompilePlanPrefix
      def filename = "{outputDir}/{verilatorPrefix}.mk"
      verilatorOutputs
      | find (_.getPathName ==* filename)
      | omap getPairFirst
      | getOrElse "{filename} not found".makeError.makeBadPath
    Fail e = makeBadPath e
  VerilatorOutputs verilatorOutputs makefile options verilatorJob

tuple VerilatorOutputs =
  AllOutputs_: List Path
  Makefile_: Path
  Plan_: VerilatorCompilePlan
  Job_: Job

global def getVerilatorOutputsAllOutputs = getVerilatorOutputsAllOutputs_
global def getVerilatorOutputsMakefile = getVerilatorOutputsMakefile_
global def getVerilatorOutputsPlan = getVerilatorOutputsPlan_
global def getVerilatorOutputsJob = getVerilatorOutputsJob_

# runs verilator and also runs make on the verilated outputs
global def doVerilatorCompile options =
  def vOutputs = runVerilator options
  def outputDir = options.getVerilatorCompilePlanOutputDir
  def makeCmd =
    def verilatorPrefix = options.getVerilatorCompilePlanPrefix
    def makeFileName = vOutputs.getVerilatorOutputsMakefile.getPathName
    "make",
    "--directory={outputDir}",
    "--makefile={relative outputDir makeFileName}",
    namedArgsToCmdline outputDir "" "" options.getVerilatorCompilePlanMakeArgs
  def makeSources = options.getVerilatorCompilePlanMain, vOutputs.getVerilatorOutputsAllOutputs
  def makeJob =
    makePlan makeCmd (mkdir outputDir, makeSources)
    | setPlanResources options.getVerilatorCompilePlanResources
    | editPlanFnOutputs (_ _ | filterVerilatorOutputs)
    | runJob
  def makeOutputs = makeJob.getJobOutputs
  def binary =
    def binaryName = "{outputDir}/{options.getVerilatorCompilePlanPrefix}"
    def findBinary = find (binaryName ==~ _.getPathName) makeOutputs
    match findBinary
      None   = "Unable to find verilator binary: {binaryName}!".makeError.makeBadPath
      Some (Pair b _) = b

  VerilatorCompileOutputs vOutputs.getVerilatorOutputsAllOutputs makeOutputs options binary makeJob

tuple VerilatorCompileOutputs =
  VerilatorOutputs_:    List Path
  MakeOutputs_:         List Path
  InputOptions_:        VerilatorCompilePlan
  Binary_:              Path
  Job_:                 Job

global def getVerilatorCompileOutputsVerilatorOutputs = getVerilatorCompileOutputsVerilatorOutputs_
global def getVerilatorCompileOutputsMakeOutputs      = getVerilatorCompileOutputsMakeOutputs_
global def getVerilatorCompileOutputsInputOptions     = getVerilatorCompileOutputsInputOptions_
global def getVerilatorCompileOutputsBinary           = getVerilatorCompileOutputsBinary_
global def getVerilatorCompileOutputsJob              = getVerilatorCompileOutputsJob_



tuple VerilatorExecutePlan =
  global OutputDir:      String
  global Plusargs:       List NamedArg
  global VisibleFiles:   List Path
  global CompileOutputs: VerilatorCompileOutputs
  global ExtraArgs:      List NamedArg
  global StderrTailNum:  Integer
  global StdoutTailNum:  Integer
  global Resources:      List String

global def makeVerilatorExecutePlan compileOutputs outputDir =
  VerilatorExecutePlan outputDir Nil Nil compileOutputs Nil 5000 5000 Nil

global def doVerilatorExecute options =
  def outputDir = options.getVerilatorExecutePlanOutputDir

  def wrapperScript = source "{here}/../scripts/redirect_wrapper"
  def inputs =
    def allCompileOutputs =
      options.getVerilatorExecutePlanCompileOutputs.getVerilatorCompileOutputsMakeOutputs
    def extraSources = options.getVerilatorExecutePlanVisibleFiles
    wrapperScript, mkdir outputDir, allCompileOutputs ++ extraSources

  def plusargs = namedArgsToCmdline outputDir "+" "=" options.getVerilatorExecutePlanPlusargs
  def extraArgs = namedArgsToCmdline "." "" "" options.getVerilatorExecutePlanExtraArgs
  def binary = options.getVerilatorExecutePlanCompileOutputs.getVerilatorCompileOutputsBinary
  def stderrFile = "{outputDir}/sim.err"
  def stdoutFile = "{outputDir}/sim.out"
  def cmdline =
    relative outputDir wrapperScript.getPathName,
    relative outputDir stdoutFile,
    relative outputDir stderrFile,
    str options.getVerilatorExecutePlanStdoutTailNum,
    str options.getVerilatorExecutePlanStderrTailNum,
    "./{relative outputDir binary.getPathName}",
    (extraArgs ++ plusargs)

  def jobResult =
    makePlan cmdline inputs
    | setPlanDirectory outputDir
    | setPlanResources options.getVerilatorExecutePlanResources
    | runJob

  VerilatorExecuteOutputs options jobResult

tuple VerilatorExecuteOutputs =
  InputOptions_:       VerilatorExecutePlan
  Job_:                Job

target readOutput fileName =
  def regex = regExpCat (`(.*/)?`, fileName.quote, Nil)
  _
  | getVerilatorExecuteOutputsRawOutputs
  | filter (matches regex _.getPathName)
  | head
  | getOrFail "Verilator: could not find {fileName}".makeError
  | rmapPass read

global def getVerilatorExecuteOutputsRawOutputs = _.getVerilatorExecuteOutputsJob_.getJobFailedOutputs
global def getVerilatorExecuteOutputsStdout     = _.getVerilatorExecuteOutputsJob_.getJobStdout
global def getVerilatorExecuteOutputsStderr     = _.getVerilatorExecuteOutputsJob_.getJobStderr
global def getVerilatorExecuteOutputsStatus     = _.getVerilatorExecuteOutputsJob_.getJobStatus
global def getVerilatorExecuteOutputsPlan       = getVerilatorExecuteOutputsInputOptions_
global def getVerilatorExecuteOutputsJob        = getVerilatorExecuteOutputsJob_
