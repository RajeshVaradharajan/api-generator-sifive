tuple VerilatorDUTSimulatorPlan =
  global TestDriver:     String
  global Waves:          Boolean
  global Score:          DUT => DUTSimCompileOptions => DUTSimExecuteOptions => UserSimulationOptions => Double
  global CompileOptions: DUT => PrivateVerilatorDUTSimCompileOptions
  global ExecuteOptions: DUT => PrivateVerilatorDUTSimExecuteOptions

global def makeVerilatorDUTSimulatorPlan testDriver waves score compileOptions executeOptions =
  VerilatorDUTSimulatorPlan testDriver waves score compileOptions executeOptions


# compile options that you want to bake into your dut simulator
tuple VerilatorDUTSimCompileOptions =
  global GenericOpts: DUTSimCompileOptions
  global MakeArgs:    List NamedArg
  global ExtraArgs:   List NamedArg

tuple PrivateVerilatorDUTSimCompileOptions =
  global Main:      Path
  global Prefix:    String
  global TopModule: String
  global DUTOpts:   DUTSimCompileOptions
  global MakeArgs:  List NamedArg
  global ExtraArgs: List NamedArg

global def makePrivateVerilatorDUTSimCompileOptions main prefix topModule =
  def dutOpts =
    emptyDUTSimCompileOptions
    | setDUTSimCompileOptionsResources defaultVerilatorResources
  PrivateVerilatorDUTSimCompileOptions
  main
  prefix
  topModule
  dutOpts
  Nil
  Nil

def toVerilatorSimCompilePlan privateOpts outputDir =
  def dutOpts      = privateOpts.getPrivateVerilatorDUTSimCompileOptionsDUTOpts

  def includeDirs  = dutOpts.getDUTSimCompileOptionsIncludeDirs
  def defines      = dutOpts.getDUTSimCompileOptionsDefines
  def sourceFiles  = dutOpts.getDUTSimCompileOptionsSourceFiles
  def plusargs     = dutOpts.getDUTSimCompileOptionsPlusargs
  def resources    = dutOpts.getDUTSimCompileOptionsResources

  def makeArgs     = privateOpts.getPrivateVerilatorDUTSimCompileOptionsMakeArgs
  def extraArgs    = privateOpts.getPrivateVerilatorDUTSimCompileOptionsExtraArgs
  def main         = privateOpts.getPrivateVerilatorDUTSimCompileOptionsMain
  def prefix       = privateOpts.getPrivateVerilatorDUTSimCompileOptionsPrefix
  def topModule    = privateOpts.getPrivateVerilatorDUTSimCompileOptionsTopModule

  makeVerilatorCompilePlan sourceFiles main topModule outputDir
  | setVerilatorCompilePlanExtraArgs   extraArgs
  | setVerilatorCompilePlanMakeArgs    makeArgs
  | setVerilatorCompilePlanIncludeDirs includeDirs
  | setVerilatorCompilePlanDefines     defines
  | setVerilatorCompilePlanPlusargs    plusargs
  | setVerilatorCompilePlanPrefix      prefix
  | setVerilatorCompilePlanResources   resources

global topic verilatorDUTSimCompileOptionsHooks : DUT => Option (PrivateVerilatorDUTSimCompileOptions => PrivateVerilatorDUTSimCompileOptions)
global topic verilatorDUTSimExecuteOptionsHooks : DUT => Option (PrivateVerilatorDUTSimExecuteOptions => PrivateVerilatorDUTSimExecuteOptions)

# execute options that you want to bake into your dut simulator
tuple VerilatorDUTSimExecuteOptions =
  global GenericOpts: DUTSimExecuteOptions
  global ExtraArgs:   List NamedArg

tuple PrivateVerilatorDUTSimExecuteOptions =
  global DUTOpts:   DUTSimExecuteOptions
  global ExtraArgs: List NamedArg

global def makePrivateVerilatorDUTSimExecuteOptions =
  def dutOpts = emptyDUTSimExecuteOptions
  PrivateVerilatorDUTSimExecuteOptions dutOpts Nil


def toVerilatorSimExecutePlan opts compileOutputs outputDir =
  def dutOpts      = opts.getPrivateVerilatorDUTSimExecuteOptionsDUTOpts

  def plusargs     = dutOpts.getDUTSimExecuteOptionsPlusargs
  def visibleFiles = dutOpts.getDUTSimExecuteOptionsVisibleFiles
  def resources    = dutOpts.getDUTSimExecuteOptionsResources
  def extraArgs    = opts.getPrivateVerilatorDUTSimExecuteOptionsExtraArgs

  makeVerilatorExecutePlan compileOutputs outputDir
  | setVerilatorExecutePlanPlusargs     plusargs
  | setVerilatorExecutePlanVisibleFiles visibleFiles
  | setVerilatorExecutePlanExtraArgs    extraArgs
  | setVerilatorExecutePlanResources    resources


# takes a VerialtorDUTSimulatorPlan and makes a DUTSimulator
global def makeVerilatorDUTSimulator plan =
  def simName   = "verilator"
  def simVendor = "veripool"
  def testDriver = plan.getVerilatorDUTSimulatorPlanTestDriver
  def waves  = plan.getVerilatorDUTSimulatorPlanWaves
  def score  = plan.getVerilatorDUTSimulatorPlanScore

  def imp dut rawCompileOptions rawExecuteOptions userOptions =
    def filter sim = dutSimulatorNameEquals simName sim && dutSimulatorVendorEquals simVendor sim

    def compileOutputs =
      def appendUserPlusargs = editDUTSimCompileOptionsPlusargs (_ ++ userOptions.getUserSimulationOptionsCompilePlusargs)
      def appendDUTOptions = appendDUTSimCompileOptions dut.getDUTSimCompileOptions
      def privateOpts =
        plan.getVerilatorDUTSimulatorPlanCompileOptions dut
        | editPrivateVerilatorDUTSimCompileOptionsDUTOpts appendDUTOptions
        | editPrivateVerilatorDUTSimCompileOptionsDUTOpts appendUserPlusargs
        | applyPartialEdits dut (subscribe verilatorDUTSimCompileOptionsHooks)
      def outputDir = userOptions.getUserSimulationOptionsCompileOutputDir
      toVerilatorSimCompilePlan privateOpts outputDir
      | doVerilatorCompile

    def executeOutputs =
      def appendUserPlusargs = editDUTSimExecuteOptionsPlusargs (_ ++ userOptions.getUserSimulationOptionsExecutePlusargs)
      def appendDUTOptions = (appendDUTSimExecuteOptions rawExecuteOptions)
      def privateOpts =
        plan.getVerilatorDUTSimulatorPlanExecuteOptions dut
        | editPrivateVerilatorDUTSimExecuteOptionsDUTOpts appendDUTOptions
        | editPrivateVerilatorDUTSimExecuteOptionsDUTOpts appendUserPlusargs
        | applyPartialEdits dut (subscribe verilatorDUTSimExecuteOptionsHooks)
      def outputDir = userOptions.getUserSimulationOptionsExecuteOutputDir
      toVerilatorSimExecutePlan privateOpts compileOutputs outputDir
      | doVerilatorExecute

    executeOutputs
    | getVerilatorExecuteOutputsJob
    | makeSimulationOutput

  makeDUTSimulatorPlan simName simVendor testDriver waves score imp
  | makeDUTSimulator

global def verilatorCompile dut userOptions =
  def compileOutputs =
    def appendUserPlusargs = editDUTSimCompileOptionsPlusargs (_ ++ userOptions.getUserSimulationOptionsCompilePlusargs)
    def appendDUTOptions = (appendDUTSimCompileOptions dut.getDUTSimulationOptions.getDUTSimulationOptionsCompileOptions)
    def privateOpts =
      verilatorCompileOptsExtract False dut
      | editPrivateVerilatorDUTSimCompileOptionsDUTOpts appendUserPlusargs
      | editPrivateVerilatorDUTSimCompileOptionsDUTOpts appendDUTOptions
      | applyPartialEdits dut (subscribe verilatorDUTSimCompileOptionsHooks)
    def outputDir = userOptions.getUserSimulationOptionsCompileOutputDir
    toVerilatorSimCompilePlan privateOpts outputDir
    | doVerilatorCompile

  compileOutputs

def verilatorCompileOptsExtract waves dut =
  def main = source "{here}/../csrc/verilator-main.cpp".simplify
  def prefix = "V{freedomTestDriverName}"
  def topModule = "TestDriver"

  def makeArgs =
    NamedArg "--jobs=8",
    NamedArg "--load-average=15.0",
    NamedArg "CXX=g++",
    NamedArg "OPT=-O2 -DVL_DEBUG=1",
    NamedArg "VM_PARALLEL_BUILDS=1",
    Nil

  def extraArgs =
    def cflags =
      "-std=c++14",
      "-no-pie",
      "-DTEST_HARNESS={prefix}",
      Nil

    NamedArgInteger "--error-limit"         9999,
    NamedArgInteger "--output-split"        1000000,
    NamedArgInteger "--output-split-cfuncs" 80000,
    NamedArgInteger "--inline-mult"         100000,
    NamedArg "--cc",
    NamedArg "--exe",
    NamedArg "--vpi",
    NamedArg "-sv",
    NamedArg "-Wno-STMTDLY",
    NamedArg "-Wno-WIDTH",
    NamedArg "-Wno-UNUSED",
    NamedArg "--x-assign",
    NamedArg "unique",
    NamedArg "--assert",
    NamedArg "--report-unoptflat",
    NamedArgString "-CFLAGS" (catWith " " cflags),
    Nil

  def withWavesOptions opts =
    if waves
    then
      opts
      | editPrivateVerilatorDUTSimCompileOptionsDUTOpts (_ | editDUTSimCompileOptionsDefines (NamedArg "DEBUG", _))
      | editPrivateVerilatorDUTSimCompileOptionsExtraArgs (NamedArg "--trace", _)
    else opts

  def genericOpts = freedomTestDriverSimCompileOpts dut

  makePrivateVerilatorDUTSimCompileOptions main prefix topModule
  | editPrivateVerilatorDUTSimCompileOptionsDUTOpts genericOpts.appendDUTSimCompileOptions
  | setPrivateVerilatorDUTSimCompileOptionsMakeArgs makeArgs
  | setPrivateVerilatorDUTSimCompileOptionsExtraArgs extraArgs
  | withWavesOptions

def verilatorExecuteOptsExtract waves dut =
  def withWavesOptions opts =
    if waves
    then
      opts
      | editPrivateVerilatorDUTSimExecuteOptionsDUTOpts (editDUTSimExecuteOptionsPlusargs (NamedArgString "vcdfile" "sim.vcd", _))
    else opts

  def genericOpts = freedomTestDriverSimExecuteOpts dut

  makePrivateVerilatorDUTSimExecuteOptions
  | editPrivateVerilatorDUTSimExecuteOptionsDUTOpts genericOpts.appendDUTSimExecuteOptions
  | withWavesOptions

def makeFreedomVerilatorDUTSimulator waves =
  def name = "verilator"
  def score = (\_ \_ \_ \_ 1.0) # TODO
  def compileOptions = verilatorCompileOptsExtract waves
  def executeOptions = verilatorExecuteOptsExtract waves
  makeVerilatorDUTSimulatorPlan name waves score compileOptions executeOptions
  | makeVerilatorDUTSimulator


publish dutSimulators = freedomVerilatorDUTSimulator, freedomVerilatorWavesDUTSimulator, Nil
global def freedomVerilatorDUTSimulator = makeFreedomVerilatorDUTSimulator False
global def freedomVerilatorWavesDUTSimulator = makeFreedomVerilatorDUTSimulator True
