tuple BaseHeaderPlan =
  global Vendor:            String
  global Device:            String
  global OMFile:            Path
  global OutputDir:         String
  global OverwriteExisting: Boolean

tuple DriverOutput =
  global CFiles:      List Path
  global IncludeDirs: List String
  global Sources:     List Path

# create a BasicDriverPlan
# duhFile => path to your duh file (device.json5)
# OMFile => a function to produce the OMFile, takes Unit as an arg
# VendorName => the vendor name used for the device
# DeviceName => the name of the device
# LocalMetalDirectory => the metal/drivers directory in the device's repository
global def makeBaseHeaderPlan vendorName deviceName omFile outputDir =
  BaseHeaderPlan vendorName deviceName omFile outputDir True

global def makeBaseHeader plan =
  def omfile = plan.getBaseHeaderPlanOMFile
  def outputDir = plan.getBaseHeaderPlanOutputDir
  def extraFlags =
    def overwrite =
      if plan.getBaseHeaderPlanOverwriteExisting
      then "--overwrite-existing", Nil
      else Nil
    overwrite
  def script = "{here}/../scripts/generate_header.py".simplify
  def cmd = pythonCommand script (
    "--object-model", omfile.getPathName,
    "--vendor", plan.getBaseHeaderPlanVendor,
    "--device", plan.getBaseHeaderPlanDevice,
    "--bsp-dir", outputDir,
    extraFlags
  )
  def visibleFiles =
    script.source,
    omfile,
    outputDir.mkdir,
    Nil
  def outputs =
    makePlan cmd visibleFiles
    | addPythonEnv ("{here}/../scripts/generate_drivers_env".simplify)
    | runJob
    | getJobOutputs
  DriverOutput (filter (matches `.*\.c` _.getPathName) outputs) (outputDir, Nil) outputs
